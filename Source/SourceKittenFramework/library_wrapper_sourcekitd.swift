// this file is generated by `convert_generated_interface_to_wrapper.py`
#if SWIFT_PACKAGE
import SourceKit
#endif
private let library = toolchainLoader.load("sourcekitd.framework/Versions/A/sourcekitd")
// swiftlint:disable file_length
// swiftlint:disable force_unwrapping
// swiftlint:disable function_parameter_count
// swiftlint:disable missing_docs
// swiftlint:disable trailing_newline
// swiftlint:disable variable_name
// swiftlint:disable valid_docs
//===--- sourcekitd.h - -----------------------------------------*- C++ -*-===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2016 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See http://swift.org/LICENSE.txt for license information
// See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

/**
 * \brief The version constants for the sourcekitd API.
 * SOURCEKITD_VERSION_MINOR should increase when there are API additions.
 * SOURCEKITD_VERSION_MAJOR is intended for "major" source/ABI breaking changes.
 *
 * The policy about the sourcekitd API is to keep it source and ABI compatible,
 * thus SOURCEKITD_VERSION_MAJOR is expected to remain stable.
 */
// public var SOURCEKITD_VERSION_MAJOR: Int32 { get }
// public var SOURCEKITD_VERSION_MINOR: Int32 { get }

// public var SOURCEKITD_HAS_BLOCKS: Int32 { get }


/**
 * \brief Initializes structures needed across the rest of the sourcekitd API.
 *
 * Must be called before any other sourcekitd call.
 * Can be called multiple times as long as it is matched with a
 * \c sourcekitd_shutdown call.
 * Calling \c sourcekitd_initialize a second time without an intervening
 * \c sourcekitd_shutdown is undefined.
 * \c sourcekitd_initialize does not need to be called again even if the service
 * crashes.
 */
public func sourcekitd_initialize() {
    return _sourcekitd_initialize()
}
private let _sourcekitd_initialize: @convention(c) () -> () = library.loadSymbol("sourcekitd_initialize")



/**
 * \brief Deallocates structures needed across the rest of the sourcekitd API.
 *
 * If there are response handlers still waiting for a response, they will
 * receive a SOURCEKITD_ERROR_REQUEST_CANCELLED response.
 *
 * Calling \c sourcekitd_shutdown without a matching \c sourcekitd_initialize is
 * undefined.
 */
public func sourcekitd_shutdown() {
    return _sourcekitd_shutdown()
}
private let _sourcekitd_shutdown: @convention(c) () -> () = library.loadSymbol("sourcekitd_shutdown")


// public typealias sourcekitd_interrupted_connection_handler_t = () -> Void

/**
 * \brief Sets the handler which should be called whenever the connection to
 * SourceKit is interrupted.
 *
 * The handler should reestablish any necessary state, such as re-opening any
 * documents which were open before the connection was interrupted.
 *
 * It is not necessary to call \c sourcekitd_initialize; the connection will
 * automatically be reestablished when sending the next request.
 *
 * \param handler Interrupted connection handler to use. Pass NULL to remove the
 * handler.
 */
public func sourcekitd_set_interrupted_connection_handler(handler: sourcekitd_interrupted_connection_handler_t) {
    return _sourcekitd_set_interrupted_connection_handler(handler: handler)
}
private let _sourcekitd_set_interrupted_connection_handler: @convention(c) (handler: sourcekitd_interrupted_connection_handler_t) -> () = library.loadSymbol("sourcekitd_set_interrupted_connection_handler")


/**
 * \brief A "unique identifier" utilized by the request/response protocol.
 *
 * A \c sourcekitd_uid_t object is associated with a string and is uniqued for
 * the lifetime of the process. Its usefulness is in providing an "infinite
 * namespace" of identifiers.
 * A \c sourcekitd_uid_t object remains valid even if the service crashes.
 */
// public typealias sourcekitd_uid_t = COpaquePointer

/**
 * \brief Create a \c sourcekitd_uid_t from a C string.
 */
@warn_unused_result
public func sourcekitd_uid_get_from_cstr(string: UnsafePointer<Int8>) -> sourcekitd_uid_t {
    return _sourcekitd_uid_get_from_cstr(string: string)
}
private let _sourcekitd_uid_get_from_cstr: @convention(c) (string: UnsafePointer<Int8>) -> sourcekitd_uid_t = library.loadSymbol("sourcekitd_uid_get_from_cstr")


/**
 * \brief Create a \c sourcekitd_uid_t from a string buffer.
 */
@warn_unused_result
public func sourcekitd_uid_get_from_buf(buf: UnsafePointer<Int8>, _ length: Int) -> sourcekitd_uid_t {
    return _sourcekitd_uid_get_from_buf(buf: buf, length: length)
}
private let _sourcekitd_uid_get_from_buf: @convention(c) (buf: UnsafePointer<Int8>, length: Int) -> sourcekitd_uid_t = library.loadSymbol("sourcekitd_uid_get_from_buf")


/**
 * \brief Get the length of the string associated with  a \c sourcekitd_uid_t.
 */
@warn_unused_result
public func sourcekitd_uid_get_length(obj: sourcekitd_uid_t) -> Int {
    return _sourcekitd_uid_get_length(obj: obj)
}
private let _sourcekitd_uid_get_length: @convention(c) (obj: sourcekitd_uid_t) -> Int = library.loadSymbol("sourcekitd_uid_get_length")


/**
 * \brief Get the C string pointer associated with a \c sourcekitd_uid_t.
 */
@warn_unused_result
public func sourcekitd_uid_get_string_ptr(obj: sourcekitd_uid_t) -> UnsafePointer<Int8> {
    return _sourcekitd_uid_get_string_ptr(obj: obj)
}
private let _sourcekitd_uid_get_string_ptr: @convention(c) (obj: sourcekitd_uid_t) -> UnsafePointer<Int8> = library.loadSymbol("sourcekitd_uid_get_string_ptr")


/**
 * \defgroup Request API
 *
 * @{
 */

/**
 * \brief Used for constructing a request object.
 */
// public typealias sourcekitd_object_t = UnsafeMutablePointer<Void>

public func sourcekitd_request_retain(object: sourcekitd_object_t) -> sourcekitd_object_t {
    return _sourcekitd_request_retain(object: object)
}
private let _sourcekitd_request_retain: @convention(c) (object: sourcekitd_object_t) -> sourcekitd_object_t = library.loadSymbol("sourcekitd_request_retain")


public func sourcekitd_request_release(object: sourcekitd_object_t) {
    return _sourcekitd_request_release(object: object)
}
private let _sourcekitd_request_release: @convention(c) (object: sourcekitd_object_t) -> () = library.loadSymbol("sourcekitd_request_release")


@warn_unused_result
public func sourcekitd_request_dictionary_create(keys: UnsafePointer<sourcekitd_uid_t>, _ values: UnsafePointer<sourcekitd_object_t>, _ count: Int) -> sourcekitd_object_t {
    return _sourcekitd_request_dictionary_create(keys: keys, values: values, count: count)
}
private let _sourcekitd_request_dictionary_create: @convention(c) (keys: UnsafePointer<sourcekitd_uid_t>, values: UnsafePointer<sourcekitd_object_t>, count: Int) -> sourcekitd_object_t = library.loadSymbol("sourcekitd_request_dictionary_create")


public func sourcekitd_request_dictionary_set_value(dict: sourcekitd_object_t, _ key: sourcekitd_uid_t, _ value: sourcekitd_object_t) {
    return _sourcekitd_request_dictionary_set_value(dict: dict, key: key, value: value)
}
private let _sourcekitd_request_dictionary_set_value: @convention(c) (dict: sourcekitd_object_t, key: sourcekitd_uid_t, value: sourcekitd_object_t) -> () = library.loadSymbol("sourcekitd_request_dictionary_set_value")


public func sourcekitd_request_dictionary_set_string(dict: sourcekitd_object_t, _ key: sourcekitd_uid_t, _ string: UnsafePointer<Int8>) {
    return _sourcekitd_request_dictionary_set_string(dict: dict, key: key, string: string)
}
private let _sourcekitd_request_dictionary_set_string: @convention(c) (dict: sourcekitd_object_t, key: sourcekitd_uid_t, string: UnsafePointer<Int8>) -> () = library.loadSymbol("sourcekitd_request_dictionary_set_string")


public func sourcekitd_request_dictionary_set_stringbuf(dict: sourcekitd_object_t, _ key: sourcekitd_uid_t, _ buf: UnsafePointer<Int8>, _ length: Int) {
    return _sourcekitd_request_dictionary_set_stringbuf(dict: dict, key: key, buf: buf, length: length)
}
private let _sourcekitd_request_dictionary_set_stringbuf: @convention(c) (dict: sourcekitd_object_t, key: sourcekitd_uid_t, buf: UnsafePointer<Int8>, length: Int) -> () = library.loadSymbol("sourcekitd_request_dictionary_set_stringbuf")


public func sourcekitd_request_dictionary_set_int64(dict: sourcekitd_object_t, _ key: sourcekitd_uid_t, _ val: Int64) {
    return _sourcekitd_request_dictionary_set_int64(dict: dict, key: key, val: val)
}
private let _sourcekitd_request_dictionary_set_int64: @convention(c) (dict: sourcekitd_object_t, key: sourcekitd_uid_t, val: Int64) -> () = library.loadSymbol("sourcekitd_request_dictionary_set_int64")


public func sourcekitd_request_dictionary_set_uid(dict: sourcekitd_object_t, _ key: sourcekitd_uid_t, _ uid: sourcekitd_uid_t) {
    return _sourcekitd_request_dictionary_set_uid(dict: dict, key: key, uid: uid)
}
private let _sourcekitd_request_dictionary_set_uid: @convention(c) (dict: sourcekitd_object_t, key: sourcekitd_uid_t, uid: sourcekitd_uid_t) -> () = library.loadSymbol("sourcekitd_request_dictionary_set_uid")


@warn_unused_result
public func sourcekitd_request_array_create(objects: UnsafePointer<sourcekitd_object_t>, _ count: Int) -> sourcekitd_object_t {
    return _sourcekitd_request_array_create(objects: objects, count: count)
}
private let _sourcekitd_request_array_create: @convention(c) (objects: UnsafePointer<sourcekitd_object_t>, count: Int) -> sourcekitd_object_t = library.loadSymbol("sourcekitd_request_array_create")


public func sourcekitd_request_array_set_value(array: sourcekitd_object_t, _ index: Int, _ value: sourcekitd_object_t) {
    return _sourcekitd_request_array_set_value(array: array, index: index, value: value)
}
private let _sourcekitd_request_array_set_value: @convention(c) (array: sourcekitd_object_t, index: Int, value: sourcekitd_object_t) -> () = library.loadSymbol("sourcekitd_request_array_set_value")


public func sourcekitd_request_array_set_string(array: sourcekitd_object_t, _ index: Int, _ string: UnsafePointer<Int8>) {
    return _sourcekitd_request_array_set_string(array: array, index: index, string: string)
}
private let _sourcekitd_request_array_set_string: @convention(c) (array: sourcekitd_object_t, index: Int, string: UnsafePointer<Int8>) -> () = library.loadSymbol("sourcekitd_request_array_set_string")


public func sourcekitd_request_array_set_stringbuf(array: sourcekitd_object_t, _ index: Int, _ buf: UnsafePointer<Int8>, _ length: Int) {
    return _sourcekitd_request_array_set_stringbuf(array: array, index: index, buf: buf, length: length)
}
private let _sourcekitd_request_array_set_stringbuf: @convention(c) (array: sourcekitd_object_t, index: Int, buf: UnsafePointer<Int8>, length: Int) -> () = library.loadSymbol("sourcekitd_request_array_set_stringbuf")


public func sourcekitd_request_array_set_int64(array: sourcekitd_object_t, _ index: Int, _ val: Int64) {
    return _sourcekitd_request_array_set_int64(array: array, index: index, val: val)
}
private let _sourcekitd_request_array_set_int64: @convention(c) (array: sourcekitd_object_t, index: Int, val: Int64) -> () = library.loadSymbol("sourcekitd_request_array_set_int64")


public func sourcekitd_request_array_set_uid(array: sourcekitd_object_t, _ index: Int, _ uid: sourcekitd_uid_t) {
    return _sourcekitd_request_array_set_uid(array: array, index: index, uid: uid)
}
private let _sourcekitd_request_array_set_uid: @convention(c) (array: sourcekitd_object_t, index: Int, uid: sourcekitd_uid_t) -> () = library.loadSymbol("sourcekitd_request_array_set_uid")


@warn_unused_result
public func sourcekitd_request_int64_create(val: Int64) -> sourcekitd_object_t {
    return _sourcekitd_request_int64_create(val: val)
}
private let _sourcekitd_request_int64_create: @convention(c) (val: Int64) -> sourcekitd_object_t = library.loadSymbol("sourcekitd_request_int64_create")


@warn_unused_result
public func sourcekitd_request_string_create(string: UnsafePointer<Int8>) -> sourcekitd_object_t {
    return _sourcekitd_request_string_create(string: string)
}
private let _sourcekitd_request_string_create: @convention(c) (string: UnsafePointer<Int8>) -> sourcekitd_object_t = library.loadSymbol("sourcekitd_request_string_create")


@warn_unused_result
public func sourcekitd_request_uid_create(uid: sourcekitd_uid_t) -> sourcekitd_object_t {
    return _sourcekitd_request_uid_create(uid: uid)
}
private let _sourcekitd_request_uid_create: @convention(c) (uid: sourcekitd_uid_t) -> sourcekitd_object_t = library.loadSymbol("sourcekitd_request_uid_create")


/**
 * \brief Creates a request object by parsing the provided string in YAML
 * format.
 *
 * \param yaml The string in YAML format.
 *
 * \param error A pointer to store a C string of the error description if
 * parsing fails. This string should be disposed of with \c free when done.
 * Can be NULL.
 *
 * \returns A sourcekitd_object_t instance or NULL if parsing fails.
 */
@warn_unused_result
public func sourcekitd_request_create_from_yaml(yaml: UnsafePointer<Int8>, _ error: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>) -> sourcekitd_object_t {
    return _sourcekitd_request_create_from_yaml(yaml: yaml, error: error)
}
private let _sourcekitd_request_create_from_yaml: @convention(c) (yaml: UnsafePointer<Int8>, error: UnsafeMutablePointer<UnsafeMutablePointer<Int8>>) -> sourcekitd_object_t = library.loadSymbol("sourcekitd_request_create_from_yaml")


/**
 * \brief Prints to stderr a string representation of the request object in YAML
 * format.
 */
public func sourcekitd_request_description_dump(obj: sourcekitd_object_t) {
    return _sourcekitd_request_description_dump(obj: obj)
}
private let _sourcekitd_request_description_dump: @convention(c) (obj: sourcekitd_object_t) -> () = library.loadSymbol("sourcekitd_request_description_dump")


/**
 * \brief Copies a string representation of the request object in YAML format.
 * \returns A string representation of the request object. This string should
 * be disposed of with \c free when done.
 */
public func sourcekitd_request_description_copy(obj: sourcekitd_object_t) -> UnsafeMutablePointer<Int8> {
    return _sourcekitd_request_description_copy(obj: obj)
}
private let _sourcekitd_request_description_copy: @convention(c) (obj: sourcekitd_object_t) -> UnsafeMutablePointer<Int8> = library.loadSymbol("sourcekitd_request_description_copy")


/**
 * @}
 */

/**
 * \defgroup Response API
 *
 * @{
 */

/**
 * \brief The result of a request.
 *
 * If the request failed \c sourcekitd_response_t will be an error response and
 * will contain information about the error, otherwise it will contain the
 * resulting values of the request.
 */
// public typealias sourcekitd_response_t = UnsafeMutablePointer<Void>

/**
 * \brief A value of the response object.
 *
 * Its lifetime is tied to the sourcekitd_response_t object that it came from.
 */
/*
public struct sourcekitd_variant_t {
    public var data: (UInt64, UInt64, UInt64)
    public init()
    public init(data: (UInt64, UInt64, UInt64))
}
*/
/**
 * \brief A value of the response object.
 *
 * Its lifetime is tied to the sourcekitd_response_t object that it came from.
 */
/*
public struct sourcekitd_variant_t {
    public var data: (UInt64, UInt64, UInt64)
    public init()
    public init(data: (UInt64, UInt64, UInt64))
}
*/

/*
public struct sourcekitd_variant_type_t : RawRepresentable, Equatable {
    public init(_ rawValue: UInt32)
    public init(rawValue: UInt32)
    public var rawValue: UInt32
}
*/
/*
public struct sourcekitd_variant_type_t : RawRepresentable, Equatable {
    public init(_ rawValue: UInt32)
    public init(rawValue: UInt32)
    public var rawValue: UInt32
}
*/

/*
public struct sourcekitd_error_t : RawRepresentable, Equatable {
    public init(_ rawValue: UInt32)
    public init(rawValue: UInt32)
    public var rawValue: UInt32
}
*/
/*
public struct sourcekitd_error_t : RawRepresentable, Equatable {
    public init(_ rawValue: UInt32)
    public init(rawValue: UInt32)
    public var rawValue: UInt32
}
*/

public func sourcekitd_response_dispose(obj: sourcekitd_response_t) {
    return _sourcekitd_response_dispose(obj: obj)
}
private let _sourcekitd_response_dispose: @convention(c) (obj: sourcekitd_response_t) -> () = library.loadSymbol("sourcekitd_response_dispose")


/**
 * \brief Returns true if the given response is an error.
 */
@warn_unused_result
public func sourcekitd_response_is_error(obj: sourcekitd_response_t) -> Bool {
    return _sourcekitd_response_is_error(obj: obj)
}
private let _sourcekitd_response_is_error: @convention(c) (obj: sourcekitd_response_t) -> Bool = library.loadSymbol("sourcekitd_response_is_error")


/**
 * \brief Returns the error kind given a response error.
 *
 * Passing a response object that is not an error will result in undefined
 * behavior.
 */
@warn_unused_result
public func sourcekitd_response_error_get_kind(err: sourcekitd_response_t) -> sourcekitd_error_t {
    return _sourcekitd_response_error_get_kind(err: err)
}
private let _sourcekitd_response_error_get_kind: @convention(c) (err: sourcekitd_response_t) -> sourcekitd_error_t = library.loadSymbol("sourcekitd_response_error_get_kind")


/**
 * \brief Returns a C string of the error description.
 *
 * Passing a response object that is not an error will result in undefined
 * behavior.
 */
@warn_unused_result
public func sourcekitd_response_error_get_description(err: sourcekitd_response_t) -> UnsafePointer<Int8> {
    return _sourcekitd_response_error_get_description(err: err)
}
private let _sourcekitd_response_error_get_description: @convention(c) (err: sourcekitd_response_t) -> UnsafePointer<Int8> = library.loadSymbol("sourcekitd_response_error_get_description")


/**
 * \brief Returns the value contained in the response.
 *
 * If the response is an error it will return a null variant.
 */
@warn_unused_result
public func sourcekitd_response_get_value(resp: sourcekitd_response_t) -> sourcekitd_variant_t {
    return _sourcekitd_response_get_value(resp: resp)
}
private let _sourcekitd_response_get_value: @convention(c) (resp: sourcekitd_response_t) -> sourcekitd_variant_t = library.loadSymbol("sourcekitd_response_get_value")


@warn_unused_result
public func sourcekitd_variant_get_type(obj: sourcekitd_variant_t) -> sourcekitd_variant_type_t {
    return _sourcekitd_variant_get_type(obj: obj)
}
private let _sourcekitd_variant_get_type: @convention(c) (obj: sourcekitd_variant_t) -> sourcekitd_variant_type_t = library.loadSymbol("sourcekitd_variant_get_type")


@warn_unused_result
public func sourcekitd_variant_dictionary_get_value(dict: sourcekitd_variant_t, _ key: sourcekitd_uid_t) -> sourcekitd_variant_t {
    return _sourcekitd_variant_dictionary_get_value(dict: dict, key: key)
}
private let _sourcekitd_variant_dictionary_get_value: @convention(c) (dict: sourcekitd_variant_t, key: sourcekitd_uid_t) -> sourcekitd_variant_t = library.loadSymbol("sourcekitd_variant_dictionary_get_value")


/**
 * The underlying C string for the specified key. NULL if the value for the
 * specified key is not a C string value or if there is no value for the
 * specified key.
 */
@warn_unused_result
public func sourcekitd_variant_dictionary_get_string(dict: sourcekitd_variant_t, _ key: sourcekitd_uid_t) -> UnsafePointer<Int8> {
    return _sourcekitd_variant_dictionary_get_string(dict: dict, key: key)
}
private let _sourcekitd_variant_dictionary_get_string: @convention(c) (dict: sourcekitd_variant_t, key: sourcekitd_uid_t) -> UnsafePointer<Int8> = library.loadSymbol("sourcekitd_variant_dictionary_get_string")


/**
 * The underlying \c int64 value for the specified key. 0 if the
 * value for the specified key is not an integer value or if there is no
 * value for the specified key.
 */
@warn_unused_result
public func sourcekitd_variant_dictionary_get_int64(dict: sourcekitd_variant_t, _ key: sourcekitd_uid_t) -> Int64 {
    return _sourcekitd_variant_dictionary_get_int64(dict: dict, key: key)
}
private let _sourcekitd_variant_dictionary_get_int64: @convention(c) (dict: sourcekitd_variant_t, key: sourcekitd_uid_t) -> Int64 = library.loadSymbol("sourcekitd_variant_dictionary_get_int64")


/**
 * The underlying \c bool value for the specified key. false if the
 * the value for the specified key is not a Boolean value or if there is no
 * value for the specified key.
 */
@warn_unused_result
public func sourcekitd_variant_dictionary_get_bool(dict: sourcekitd_variant_t, _ key: sourcekitd_uid_t) -> Bool {
    return _sourcekitd_variant_dictionary_get_bool(dict: dict, key: key)
}
private let _sourcekitd_variant_dictionary_get_bool: @convention(c) (dict: sourcekitd_variant_t, key: sourcekitd_uid_t) -> Bool = library.loadSymbol("sourcekitd_variant_dictionary_get_bool")


/**
 * The underlying \c sourcekitd_uid_t value for the specified key. NULL if the
 * value for the specified key is not a uid value or if there is no
 * value for the specified key.
 */
@warn_unused_result
public func sourcekitd_variant_dictionary_get_uid(dict: sourcekitd_variant_t, _ key: sourcekitd_uid_t) -> sourcekitd_uid_t {
    return _sourcekitd_variant_dictionary_get_uid(dict: dict, key: key)
}
private let _sourcekitd_variant_dictionary_get_uid: @convention(c) (dict: sourcekitd_variant_t, key: sourcekitd_uid_t) -> sourcekitd_uid_t = library.loadSymbol("sourcekitd_variant_dictionary_get_uid")


/**
 * \brief A block to be invoked for every key/value pair in the dictionary.
 *
 * \param key The current key in the iteration.
 *
 * \param value The current value in the iteration.
 *
 * \returns true to indicate that iteration should continue.
 */
// public typealias sourcekitd_variant_dictionary_applier_t = (sourcekitd_uid_t, sourcekitd_variant_t) -> Bool

/**
 * \brief Invokes the given block for every key/value pair in the dictionary.
 *
 * \returns true to indicate that iteration of the dictionary completed
 * successfully. Iteration will only fail if the applier block returns false.
 */
public func sourcekitd_variant_dictionary_apply(dict: sourcekitd_variant_t, _ applier: sourcekitd_variant_dictionary_applier_t) -> Bool {
    return _sourcekitd_variant_dictionary_apply(dict: dict, applier: applier)
}
private let _sourcekitd_variant_dictionary_apply: @convention(c) (dict: sourcekitd_variant_t, applier: sourcekitd_variant_dictionary_applier_t) -> Bool = library.loadSymbol("sourcekitd_variant_dictionary_apply")


/**
 * \brief A function to be invoked for every key/value pair in the dictionary.
 *
 * \param key The current key in the iteration.
 *
 * \param value The current value in the iteration.
 *
 * \returns true to indicate that iteration should continue.
 */
// public typealias sourcekitd_variant_dictionary_applier_f_t = @convention(c) (sourcekitd_uid_t, sourcekitd_variant_t, UnsafeMutablePointer<Void>) -> Bool

/**
 * \brief Invokes the given function for every key/value pair in the dictionary.
 *
 * \returns true to indicate that iteration of the dictionary completed
 * successfully. Iteration will only fail if the applier block returns 0.
 */
public func sourcekitd_variant_dictionary_apply_f(dict: sourcekitd_variant_t, _ applier: sourcekitd_variant_dictionary_applier_f_t, _ context: UnsafeMutablePointer<Void>) -> Bool {
    return _sourcekitd_variant_dictionary_apply_f(dict: dict, applier: applier, context: context)
}
private let _sourcekitd_variant_dictionary_apply_f: @convention(c) (dict: sourcekitd_variant_t, applier: sourcekitd_variant_dictionary_applier_f_t, context: UnsafeMutablePointer<Void>) -> Bool = library.loadSymbol("sourcekitd_variant_dictionary_apply_f")


@warn_unused_result
public func sourcekitd_variant_array_get_count(array: sourcekitd_variant_t) -> Int {
    return _sourcekitd_variant_array_get_count(array: array)
}
private let _sourcekitd_variant_array_get_count: @convention(c) (array: sourcekitd_variant_t) -> Int = library.loadSymbol("sourcekitd_variant_array_get_count")


@warn_unused_result
public func sourcekitd_variant_array_get_value(array: sourcekitd_variant_t, _ index: Int) -> sourcekitd_variant_t {
    return _sourcekitd_variant_array_get_value(array: array, index: index)
}
private let _sourcekitd_variant_array_get_value: @convention(c) (array: sourcekitd_variant_t, index: Int) -> sourcekitd_variant_t = library.loadSymbol("sourcekitd_variant_array_get_value")


@warn_unused_result
public func sourcekitd_variant_array_get_string(array: sourcekitd_variant_t, _ index: Int) -> UnsafePointer<Int8> {
    return _sourcekitd_variant_array_get_string(array: array, index: index)
}
private let _sourcekitd_variant_array_get_string: @convention(c) (array: sourcekitd_variant_t, index: Int) -> UnsafePointer<Int8> = library.loadSymbol("sourcekitd_variant_array_get_string")


@warn_unused_result
public func sourcekitd_variant_array_get_int64(array: sourcekitd_variant_t, _ index: Int) -> Int64 {
    return _sourcekitd_variant_array_get_int64(array: array, index: index)
}
private let _sourcekitd_variant_array_get_int64: @convention(c) (array: sourcekitd_variant_t, index: Int) -> Int64 = library.loadSymbol("sourcekitd_variant_array_get_int64")


@warn_unused_result
public func sourcekitd_variant_array_get_bool(array: sourcekitd_variant_t, _ index: Int) -> Bool {
    return _sourcekitd_variant_array_get_bool(array: array, index: index)
}
private let _sourcekitd_variant_array_get_bool: @convention(c) (array: sourcekitd_variant_t, index: Int) -> Bool = library.loadSymbol("sourcekitd_variant_array_get_bool")


@warn_unused_result
public func sourcekitd_variant_array_get_uid(array: sourcekitd_variant_t, _ index: Int) -> sourcekitd_uid_t {
    return _sourcekitd_variant_array_get_uid(array: array, index: index)
}
private let _sourcekitd_variant_array_get_uid: @convention(c) (array: sourcekitd_variant_t, index: Int) -> sourcekitd_uid_t = library.loadSymbol("sourcekitd_variant_array_get_uid")


/**
 * \brief A block to be invoked for every value in the array.
 *
 * \param index The current index in the iteration.
 *
 * \param value The current value in the iteration.
 *
 * \returns true to indicate that iteration should continue.
 */
// public typealias sourcekitd_variant_array_applier_t = (Int, sourcekitd_variant_t) -> Bool

/**
 * \brief Invokes the given block for every value in the array.
 *
 * \returns true to indicate that iteration of the array completed
 * successfully. Iteration will only fail if the applier block returns false.
 */
public func sourcekitd_variant_array_apply(array: sourcekitd_variant_t, _ applier: sourcekitd_variant_array_applier_t) -> Bool {
    return _sourcekitd_variant_array_apply(array: array, applier: applier)
}
private let _sourcekitd_variant_array_apply: @convention(c) (array: sourcekitd_variant_t, applier: sourcekitd_variant_array_applier_t) -> Bool = library.loadSymbol("sourcekitd_variant_array_apply")


/**
 * \brief A function to be invoked for every value in the array.
 *
 * \param index The current index in the iteration.
 *
 * \param value The current value in the iteration.
 *
 * \returns true to indicate that iteration should continue.
 */
// public typealias sourcekitd_variant_array_applier_f_t = @convention(c) (Int, sourcekitd_variant_t, UnsafeMutablePointer<Void>) -> Bool

/**
 * \brief Invokes the given function for every value in the array.
 *
 * \returns true to indicate that iteration of the array completed
 * successfully. Iteration will only fail if the applier block returns false.
 */
public func sourcekitd_variant_array_apply_f(array: sourcekitd_variant_t, _ applier: sourcekitd_variant_array_applier_f_t, _ context: UnsafeMutablePointer<Void>) -> Bool {
    return _sourcekitd_variant_array_apply_f(array: array, applier: applier, context: context)
}
private let _sourcekitd_variant_array_apply_f: @convention(c) (array: sourcekitd_variant_t, applier: sourcekitd_variant_array_applier_f_t, context: UnsafeMutablePointer<Void>) -> Bool = library.loadSymbol("sourcekitd_variant_array_apply_f")


@warn_unused_result
public func sourcekitd_variant_int64_get_value(obj: sourcekitd_variant_t) -> Int64 {
    return _sourcekitd_variant_int64_get_value(obj: obj)
}
private let _sourcekitd_variant_int64_get_value: @convention(c) (obj: sourcekitd_variant_t) -> Int64 = library.loadSymbol("sourcekitd_variant_int64_get_value")


@warn_unused_result
public func sourcekitd_variant_bool_get_value(obj: sourcekitd_variant_t) -> Bool {
    return _sourcekitd_variant_bool_get_value(obj: obj)
}
private let _sourcekitd_variant_bool_get_value: @convention(c) (obj: sourcekitd_variant_t) -> Bool = library.loadSymbol("sourcekitd_variant_bool_get_value")


@warn_unused_result
public func sourcekitd_variant_string_get_length(obj: sourcekitd_variant_t) -> Int {
    return _sourcekitd_variant_string_get_length(obj: obj)
}
private let _sourcekitd_variant_string_get_length: @convention(c) (obj: sourcekitd_variant_t) -> Int = library.loadSymbol("sourcekitd_variant_string_get_length")


@warn_unused_result
public func sourcekitd_variant_string_get_ptr(obj: sourcekitd_variant_t) -> UnsafePointer<Int8> {
    return _sourcekitd_variant_string_get_ptr(obj: obj)
}
private let _sourcekitd_variant_string_get_ptr: @convention(c) (obj: sourcekitd_variant_t) -> UnsafePointer<Int8> = library.loadSymbol("sourcekitd_variant_string_get_ptr")


@warn_unused_result
public func sourcekitd_variant_uid_get_value(obj: sourcekitd_variant_t) -> sourcekitd_uid_t {
    return _sourcekitd_variant_uid_get_value(obj: obj)
}
private let _sourcekitd_variant_uid_get_value: @convention(c) (obj: sourcekitd_variant_t) -> sourcekitd_uid_t = library.loadSymbol("sourcekitd_variant_uid_get_value")


/**
 * \brief Prints to stderr a string representation of the response object in
 * YAML format.
 */
public func sourcekitd_response_description_dump(resp: sourcekitd_response_t) {
    return _sourcekitd_response_description_dump(resp: resp)
}
private let _sourcekitd_response_description_dump: @convention(c) (resp: sourcekitd_response_t) -> () = library.loadSymbol("sourcekitd_response_description_dump")


/**
 * \brief Prints to the given file descriptor a string representation of the
 * response object.
 */
public func sourcekitd_response_description_dump_filedesc(resp: sourcekitd_response_t, _ fd: Int32) {
    return _sourcekitd_response_description_dump_filedesc(resp: resp, fd: fd)
}
private let _sourcekitd_response_description_dump_filedesc: @convention(c) (resp: sourcekitd_response_t, fd: Int32) -> () = library.loadSymbol("sourcekitd_response_description_dump_filedesc")


/**
 * \brief Copies a string representation of the response object in YAML format.
 * \returns A string representation of the response object. This string should
 * be disposed of with \c free when done.
 */
public func sourcekitd_response_description_copy(resp: sourcekitd_response_t) -> UnsafeMutablePointer<Int8> {
    return _sourcekitd_response_description_copy(resp: resp)
}
private let _sourcekitd_response_description_copy: @convention(c) (resp: sourcekitd_response_t) -> UnsafeMutablePointer<Int8> = library.loadSymbol("sourcekitd_response_description_copy")



/**
 * \brief Prints to stderr a string representation of the variant object in
 * YAML format.
 */
public func sourcekitd_variant_description_dump(obj: sourcekitd_variant_t) {
    return _sourcekitd_variant_description_dump(obj: obj)
}
private let _sourcekitd_variant_description_dump: @convention(c) (obj: sourcekitd_variant_t) -> () = library.loadSymbol("sourcekitd_variant_description_dump")



/**
 * \brief Prints to the given file descriptor a string representation of the
 * variant object.
 */
public func sourcekitd_variant_description_dump_filedesc(obj: sourcekitd_variant_t, _ fd: Int32) {
    return _sourcekitd_variant_description_dump_filedesc(obj: obj, fd: fd)
}
private let _sourcekitd_variant_description_dump_filedesc: @convention(c) (obj: sourcekitd_variant_t, fd: Int32) -> () = library.loadSymbol("sourcekitd_variant_description_dump_filedesc")



/**
 * \brief Copies a string representation of the variant object in YAML format.
 * \returns A string representation of the variant object. This string should
 * be disposed of with \c free when done.
 */
public func sourcekitd_variant_description_copy(obj: sourcekitd_variant_t) -> UnsafeMutablePointer<Int8> {
    return _sourcekitd_variant_description_copy(obj: obj)
}
private let _sourcekitd_variant_description_copy: @convention(c) (obj: sourcekitd_variant_t) -> UnsafeMutablePointer<Int8> = library.loadSymbol("sourcekitd_variant_description_copy")


/**
 * @}
 */

/**
 * \brief Invoke a request synchronously.
 *
 * The caller accepts ownership of the returned sourcekitd_response_t object and
 * should invoke \c sourcekitd_response_dispose on it when it is done with it.
 */
@warn_unused_result
public func sourcekitd_send_request_sync(req: sourcekitd_object_t) -> sourcekitd_response_t {
    return _sourcekitd_send_request_sync(req: req)
}
private let _sourcekitd_send_request_sync: @convention(c) (req: sourcekitd_object_t) -> sourcekitd_response_t = library.loadSymbol("sourcekitd_send_request_sync")


/**
 * \brief Used to cancel a request that has been invoked asynchronously.
 */
// public typealias sourcekitd_request_handle_t = UnsafeMutablePointer<Void>

/**
 * \brief Receives the response of an asynchronous request or notification.
 *
 * The receiver accepts ownership of the response object and should invoke
 * \c sourcekitd_response_dispose on it when it is done with it.
 */
// public typealias sourcekitd_response_receiver_t = (sourcekitd_response_t) -> Void

/**
 * \brief Invoke a request asynchronously.
 *
 * \param req the request object.
 *
 * \param out_handle the address where the associated
 * \c sourcekitd_request_handle_t will be stored. Can be NULL.
 *
 * \param receiver the block that will receive the response object.
 */
public func sourcekitd_send_request(req: sourcekitd_object_t, _ out_handle: UnsafeMutablePointer<sourcekitd_request_handle_t>, _ receiver: sourcekitd_response_receiver_t!) {
    return _sourcekitd_send_request(req: req, out_handle: out_handle, receiver: receiver)
}
private let _sourcekitd_send_request: @convention(c) (req: sourcekitd_object_t, out_handle: UnsafeMutablePointer<sourcekitd_request_handle_t>, receiver: sourcekitd_response_receiver_t!) -> () = library.loadSymbol("sourcekitd_send_request")



/**
 * \brief Cancel a request using the associated request handle returned by
 * \c sourcekitd_send_request.
 *
 * It is not guaranteed that invoking \c sourcekitd_cancel_request will cancel
 * the request. If the request gets cancelled, the receiver will get a
 * \c SOURCEKITD_ERROR_REQUEST_CANCELLED response error.
 *
 * Calling \c sourcekitd_cancel_request after the response object has been
 * delivered will have no effect.
 */
public func sourcekitd_cancel_request(handle: sourcekitd_request_handle_t) {
    return _sourcekitd_cancel_request(handle: handle)
}
private let _sourcekitd_cancel_request: @convention(c) (handle: sourcekitd_request_handle_t) -> () = library.loadSymbol("sourcekitd_cancel_request")



/**
 * \brief Sets the handler which should be called to receive notifications.
 * The block will be set to be executed in the main thread queue.
 *
 * If the connection to SourceKit is interrupted the handler will receive an
 * error response object of kind \c SOURCEKITD_ERROR_CONNECTION_INTERRUPTED.
 * Any subsequent requests will immediately fail with the same error until
 * the service is restored.
 * When the service is restored the handler will receive an empty response
 * object.
 *
 * \param receiver Notification handler block to use. Pass NULL to remove the
 * previous handler that was set.
 */
public func sourcekitd_set_notification_handler(receiver: sourcekitd_response_receiver_t!) {
    return _sourcekitd_set_notification_handler(receiver: receiver)
}
private let _sourcekitd_set_notification_handler: @convention(c) (receiver: sourcekitd_response_receiver_t!) -> () = library.loadSymbol("sourcekitd_set_notification_handler")


// public typealias sourcekitd_uid_handler_t = (UnsafePointer<Int8>) -> sourcekitd_uid_t

@available(*, deprecated, message="use sourcekitd_set_uid_handlers")
public func sourcekitd_set_uid_handler(handler: sourcekitd_uid_handler_t!) {
    return _sourcekitd_set_uid_handler(handler: handler)
}
private let _sourcekitd_set_uid_handler: @convention(c) (handler: sourcekitd_uid_handler_t!) -> () = library.loadSymbol("sourcekitd_set_uid_handler")


// public typealias sourcekitd_uid_from_str_handler_t = (UnsafePointer<Int8>) -> sourcekitd_uid_t
// public typealias sourcekitd_str_from_uid_handler_t = (sourcekitd_uid_t) -> UnsafePointer<Int8>

public func sourcekitd_set_uid_handlers(uid_from_str: sourcekitd_uid_from_str_handler_t!, _ str_from_uid: sourcekitd_str_from_uid_handler_t!) {
    return _sourcekitd_set_uid_handlers(uid_from_str: uid_from_str, str_from_uid: str_from_uid)
}
private let _sourcekitd_set_uid_handlers: @convention(c) (uid_from_str: sourcekitd_uid_from_str_handler_t!, str_from_uid: sourcekitd_str_from_uid_handler_t!) -> () = library.loadSymbol("sourcekitd_set_uid_handlers")


